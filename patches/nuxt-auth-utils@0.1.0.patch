diff --git a/dist/runtime/server/lib/oauth/github.js b/dist/runtime/server/lib/oauth/github.js
index 4f13049ec425087847b48e8e21a07beaca312997..1a9033387ac56d942a417b47501dd07336174ff3 100644
--- a/dist/runtime/server/lib/oauth/github.js
+++ b/dist/runtime/server/lib/oauth/github.js
@@ -1,33 +1,38 @@
-import { eventHandler, createError, getQuery, getRequestURL, sendRedirect } from "h3";
+import { useRuntimeConfig } from "#imports";
+import { defu } from "defu";
+import {
+  createError,
+  eventHandler,
+  getQuery,
+  getRequestURL,
+  sendRedirect,
+} from "h3";
 import { ofetch } from "ofetch";
 import { withQuery } from "ufo";
-import { defu } from "defu";
-import { useRuntimeConfig } from "#imports";
 export function githubEventHandler({ config, onSuccess, onError }) {
   return eventHandler(async (event) => {
     config = defu(config, useRuntimeConfig(event).oauth?.github, {
       authorizationURL: "https://github.com/login/oauth/authorize",
       tokenURL: "https://github.com/login/oauth/access_token",
-      authorizationParams: {}
+      authorizationParams: {},
     });
     const query = getQuery(event);
     if (query.error) {
       const error = createError({
         statusCode: 401,
         message: `GitHub login failed: ${query.error || "Unknown error"}`,
-        data: query
+        data: query,
       });
-      if (!onError)
-        throw error;
+      if (!onError) throw error;
       return onError(event, error);
     }
     if (!config.clientId || !config.clientSecret) {
       const error = createError({
         statusCode: 500,
-        message: "Missing NUXT_OAUTH_GITHUB_CLIENT_ID or NUXT_OAUTH_GITHUB_CLIENT_SECRET env variables."
+        message:
+          "Missing NUXT_OAUTH_GITHUB_CLIENT_ID or NUXT_OAUTH_GITHUB_CLIENT_SECRET env variables.",
       });
-      if (!onError)
-        throw error;
+      if (!onError) throw error;
       return onError(event, error);
     }
     if (!query.code) {
@@ -35,51 +40,48 @@ export function githubEventHandler({ config, onSuccess, onError }) {
       if (config.emailRequired && !config.scope.includes("user:email")) {
         config.scope.push("user:email");
       }
-      const redirectUrl = getRequestURL(event).href;
+      const redirectUrl =
+        process.env.NUXT_OAUTH_GITHUB_REDIRECT_URI || getRequestURL(event).href;
       return sendRedirect(
         event,
         withQuery(config.authorizationURL, {
           client_id: config.clientId,
           redirect_uri: redirectUrl,
           scope: config.scope.join(" "),
-          ...config.authorizationParams
-        })
+          ...config.authorizationParams,
+        }),
       );
     }
-    const tokens = await $fetch(
-      config.tokenURL,
-      {
-        method: "POST",
-        body: {
-          client_id: config.clientId,
-          client_secret: config.clientSecret,
-          code: query.code
-        }
-      }
-    );
+    const tokens = await $fetch(config.tokenURL, {
+      method: "POST",
+      body: {
+        client_id: config.clientId,
+        client_secret: config.clientSecret,
+        code: query.code,
+      },
+    });
     if (tokens.error) {
       const error = createError({
         statusCode: 401,
         message: `GitHub login failed: ${tokens.error || "Unknown error"}`,
-        data: tokens
+        data: tokens,
       });
-      if (!onError)
-        throw error;
+      if (!onError) throw error;
       return onError(event, error);
     }
     const accessToken = tokens.access_token;
     const user = await ofetch("https://api.github.com/user", {
       headers: {
         "User-Agent": `Github-OAuth-${config.clientId}`,
-        "Authorization": `token ${accessToken}`
-      }
+        Authorization: `token ${accessToken}`,
+      },
     });
     if (!user.email && config.emailRequired) {
       const emails = await ofetch("https://api.github.com/user/emails", {
         headers: {
           "User-Agent": `Github-OAuth-${config.clientId}`,
-          "Authorization": `token ${accessToken}`
-        }
+          Authorization: `token ${accessToken}`,
+        },
       });
       const primaryEmail = emails.find((email) => email.primary);
       if (!primaryEmail) {
@@ -89,7 +91,7 @@ export function githubEventHandler({ config, onSuccess, onError }) {
     }
     return onSuccess(event, {
       user,
-      tokens
+      tokens,
     });
   });
 }
diff --git a/dist/runtime/server/lib/oauth/google.js b/dist/runtime/server/lib/oauth/google.js
index fa3cae0110948d53062ccd17a6e407d5636d6542..975b1c3c3633a1eb388f82e68817c369f7f4c16e 100644
--- a/dist/runtime/server/lib/oauth/google.js
+++ b/dist/runtime/server/lib/oauth/google.js
@@ -1,37 +1,33 @@
+import { useRuntimeConfig } from "#imports";
+import { defu } from "defu";
 import {
-  eventHandler,
   createError,
+  eventHandler,
   getQuery,
   getRequestURL,
-  sendRedirect
+  sendRedirect,
 } from "h3";
-import { withQuery, parsePath } from "ufo";
 import { ofetch } from "ofetch";
-import { defu } from "defu";
-import { useRuntimeConfig } from "#imports";
-export function googleEventHandler({
-  config,
-  onSuccess,
-  onError
-}) {
+import { parsePath, withQuery } from "ufo";
+export function googleEventHandler({ config, onSuccess, onError }) {
   return eventHandler(async (event) => {
     config = defu(config, useRuntimeConfig(event).oauth?.google, {
       authorizationURL: "https://accounts.google.com/o/oauth2/v2/auth",
       tokenURL: "https://oauth2.googleapis.com/token",
       userURL: "https://www.googleapis.com/oauth2/v3/userinfo",
-      authorizationParams: {}
+      authorizationParams: {},
     });
     const { code } = getQuery(event);
     if (!config.clientId) {
       const error = createError({
         statusCode: 500,
-        message: "Missing NUXT_OAUTH_GOOGLE_CLIENT_ID env variables."
+        message: "Missing NUXT_OAUTH_GOOGLE_CLIENT_ID env variables.",
       });
-      if (!onError)
-        throw error;
+      if (!onError) throw error;
       return onError(event, error);
     }
-    const redirectUrl = getRequestURL(event).href;
+    const redirectUrl =
+      process.env.NUXT_OAUTH_GOOGLE_REDIRECT_URI || getRequestURL(event).href;
     if (!code) {
       config.scope = config.scope || ["email", "profile"];
       return sendRedirect(
@@ -41,8 +37,8 @@ export function googleEventHandler({
           client_id: config.clientId,
           redirect_uri: redirectUrl,
           scope: config.scope.join(" "),
-          ...config.authorizationParams
-        })
+          ...config.authorizationParams,
+        }),
       );
     }
     const body = {
@@ -50,11 +46,11 @@ export function googleEventHandler({
       redirect_uri: parsePath(redirectUrl).pathname,
       client_id: config.clientId,
       client_secret: config.clientSecret,
-      code
+      code,
     };
     const tokens = await ofetch(config.tokenURL, {
       method: "POST",
-      body
+      body,
     }).catch((error) => {
       return { error };
     });
@@ -62,24 +58,20 @@ export function googleEventHandler({
       const error = createError({
         statusCode: 401,
         message: `Google login failed: ${tokens.error?.data?.error_description || "Unknown error"}`,
-        data: tokens
+        data: tokens,
       });
-      if (!onError)
-        throw error;
+      if (!onError) throw error;
       return onError(event, error);
     }
     const accessToken = tokens.access_token;
-    const user = await ofetch(
-      config.userURL,
-      {
-        headers: {
-          Authorization: `Bearer ${accessToken}`
-        }
-      }
-    );
+    const user = await ofetch(config.userURL, {
+      headers: {
+        Authorization: `Bearer ${accessToken}`,
+      },
+    });
     return onSuccess(event, {
       tokens,
-      user
+      user,
     });
   });
 }
